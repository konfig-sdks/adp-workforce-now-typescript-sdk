/* tslint:disable */
/* eslint-disable */
/*
ADP APIs

ADP API endpoints.

The version of the OpenAPI document: 1.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * PayrollApi - axios parameter creator
 * @export
 */
export const PayrollApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Fetches a list of payroll outputs given a Region Code, Company Code, Year and Week.
         * @summary Payroll Outputs V1 (List for Region / Company Code / Year / Week)
         * @param {string} [$filter] 
         * @param {string} [$count] 
         * @param {string} [useCache] 
         * @param {string} [level] 
         * @param {string} [$select] 
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPayrollOutputs: async ($filter?: string, $count?: string, useCache?: string, level?: string, $select?: string, body?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/payroll/v1/payroll-output`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if ($filter !== undefined) {
                localVarQueryParameter['$filter'] = $filter;
            }

            if ($count !== undefined) {
                localVarQueryParameter['$count'] = $count;
            }

            if (useCache !== undefined) {
                localVarQueryParameter['use-cache'] = useCache;
            }

            if (level !== undefined) {
                localVarQueryParameter['level'] = level;
            }

            if ($select !== undefined) {
                localVarQueryParameter['$select'] = $select;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/octet-stream';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: body,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/payroll/v1/payroll-output',
                httpMethod: 'GET'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PayrollApi - functional programming interface
 * @export
 */
export const PayrollApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PayrollApiAxiosParamCreator(configuration)
    return {
        /**
         * Fetches a list of payroll outputs given a Region Code, Company Code, Year and Week.
         * @summary Payroll Outputs V1 (List for Region / Company Code / Year / Week)
         * @param {PayrollApiListPayrollOutputsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPayrollOutputs(requestParameters: PayrollApiListPayrollOutputsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const body: any = requestParameters;
            const localVarAxiosArgs = await localVarAxiosParamCreator.listPayrollOutputs(requestParameters.$filter, requestParameters.$count, requestParameters.useCache, requestParameters.level, requestParameters.$select, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PayrollApi - factory interface
 * @export
 */
export const PayrollApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PayrollApiFp(configuration)
    return {
        /**
         * Fetches a list of payroll outputs given a Region Code, Company Code, Year and Week.
         * @summary Payroll Outputs V1 (List for Region / Company Code / Year / Week)
         * @param {PayrollApiListPayrollOutputsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPayrollOutputs(requestParameters: PayrollApiListPayrollOutputsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.listPayrollOutputs(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for listPayrollOutputs operation in PayrollApi.
 * @export
 * @interface PayrollApiListPayrollOutputsRequest
 */
export type PayrollApiListPayrollOutputsRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof PayrollApiListPayrollOutputs
    */
    readonly $filter?: string
    
    /**
    * 
    * @type {string}
    * @memberof PayrollApiListPayrollOutputs
    */
    readonly $count?: string
    
    /**
    * 
    * @type {string}
    * @memberof PayrollApiListPayrollOutputs
    */
    readonly useCache?: string
    
    /**
    * 
    * @type {string}
    * @memberof PayrollApiListPayrollOutputs
    */
    readonly level?: string
    
    /**
    * 
    * @type {string}
    * @memberof PayrollApiListPayrollOutputs
    */
    readonly $select?: string
    
} & any

/**
 * PayrollApiGenerated - object-oriented interface
 * @export
 * @class PayrollApiGenerated
 * @extends {BaseAPI}
 */
export class PayrollApiGenerated extends BaseAPI {
    /**
     * Fetches a list of payroll outputs given a Region Code, Company Code, Year and Week.
     * @summary Payroll Outputs V1 (List for Region / Company Code / Year / Week)
     * @param {PayrollApiListPayrollOutputsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayrollApiGenerated
     */
    public listPayrollOutputs(requestParameters: PayrollApiListPayrollOutputsRequest = {}, options?: AxiosRequestConfig) {
        return PayrollApiFp(this.configuration).listPayrollOutputs(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
