/* tslint:disable */
/* eslint-disable */
/*
ADP APIs

ADP API endpoints.

The version of the OpenAPI document: 1.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * HRApi - axios parameter creator
 * @export
 */
export const HRApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Check the status of an async request to the Worker API given the key returned as part of the original asyn response\'s \"link\" header.
         * @summary Worker V2 (Check Async Request Status)
         * @param {string} key 
         * @param {string} [$select] 
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkAsyncRequestStatus: async (key: string, $select?: string, body?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'key' is not null or undefined
            assertParamExists('checkAsyncRequestStatus', 'key', key)
            const localVarPath = `/core/v1/operations/workerInformationManagement/hr.v2.workers/{key}`
                .replace(`{${"key"}}`, encodeURIComponent(String(key !== undefined ? key : `-key-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if ($select !== undefined) {
                localVarQueryParameter['$select'] = $select;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/octet-stream';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: body,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/core/v1/operations/workerInformationManagement/hr.v2.workers/{key}',
                httpMethod: 'GET'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Request a single worker given their AOID.
         * @summary Worker V2 (Single by AOID)
         * @param {string} anthonyAlbrightAoid 
         * @param {string} [preventCache] 
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkerByAoid: async (anthonyAlbrightAoid: string, preventCache?: string, body?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'anthonyAlbrightAoid' is not null or undefined
            assertParamExists('getWorkerByAoid', 'anthonyAlbrightAoid', anthonyAlbrightAoid)
            const localVarPath = `/hr/v2/workers/{anthony-albright-aoid}`
                .replace(`{${"anthony-albright-aoid"}}`, encodeURIComponent(String(anthonyAlbrightAoid !== undefined ? anthonyAlbrightAoid : `-anthony-albright-aoid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (preventCache !== undefined) {
                localVarQueryParameter['preventCache'] = preventCache;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/octet-stream';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: body,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/hr/v2/workers/{anthony-albright-aoid}',
                httpMethod: 'GET'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Request demographic data for a single worker given their AOID.
         * @summary Worker Demographics V2 (Single by AOID)
         * @param {string} anthonyAlbrightAoid 
         * @param {string} [preventCache] 
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkerDemographicsByAoid: async (anthonyAlbrightAoid: string, preventCache?: string, body?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'anthonyAlbrightAoid' is not null or undefined
            assertParamExists('getWorkerDemographicsByAoid', 'anthonyAlbrightAoid', anthonyAlbrightAoid)
            const localVarPath = `/hr/v2/worker-demographics/{anthony-albright-aoid}`
                .replace(`{${"anthony-albright-aoid"}}`, encodeURIComponent(String(anthonyAlbrightAoid !== undefined ? anthonyAlbrightAoid : `-anthony-albright-aoid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (preventCache !== undefined) {
                localVarQueryParameter['preventCache'] = preventCache;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/octet-stream';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: body,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/hr/v2/worker-demographics/{anthony-albright-aoid}',
                httpMethod: 'GET'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Request a collection of the top 5 workers using a URI cache-buster.
         * @summary Worker V2 (List with Top 5 and Prevent Cache)
         * @param {string} [$top] 
         * @param {string} [preventCache] 
         * @param {string} [$filter] 
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTop5PreventCache: async ($top?: string, preventCache?: string, $filter?: string, body?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/hr/v2/workers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if ($top !== undefined) {
                localVarQueryParameter['$top'] = $top;
            }

            if (preventCache !== undefined) {
                localVarQueryParameter['preventCache'] = preventCache;
            }

            if ($filter !== undefined) {
                localVarQueryParameter['$filter'] = $filter;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/octet-stream';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: body,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/hr/v2/workers',
                httpMethod: 'GET'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Request demographic data for a collection of the top 5 workers using a URI cache-buster.
         * @summary Worker Demographics V2 (List with Top 5 and Prevent Cache)
         * @param {string} [$top] 
         * @param {string} [preventCache] 
         * @param {string} [$filter] 
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTop5PreventCache_1: async ($top?: string, preventCache?: string, $filter?: string, body?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/hr/v2/worker-demographics`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if ($top !== undefined) {
                localVarQueryParameter['$top'] = $top;
            }

            if (preventCache !== undefined) {
                localVarQueryParameter['preventCache'] = preventCache;
            }

            if ($filter !== undefined) {
                localVarQueryParameter['$filter'] = $filter;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/octet-stream';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: body,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/hr/v2/worker-demographics',
                httpMethod: 'GET'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HRApi - functional programming interface
 * @export
 */
export const HRApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = HRApiAxiosParamCreator(configuration)
    return {
        /**
         * Check the status of an async request to the Worker API given the key returned as part of the original asyn response\'s \"link\" header.
         * @summary Worker V2 (Check Async Request Status)
         * @param {HRApiCheckAsyncRequestStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkAsyncRequestStatus(requestParameters: HRApiCheckAsyncRequestStatusRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const body: any = requestParameters;
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkAsyncRequestStatus(requestParameters.key, requestParameters.$select, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Request a single worker given their AOID.
         * @summary Worker V2 (Single by AOID)
         * @param {HRApiGetWorkerByAoidRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWorkerByAoid(requestParameters: HRApiGetWorkerByAoidRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const body: any = requestParameters;
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWorkerByAoid(requestParameters.anthonyAlbrightAoid, requestParameters.preventCache, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Request demographic data for a single worker given their AOID.
         * @summary Worker Demographics V2 (Single by AOID)
         * @param {HRApiGetWorkerDemographicsByAoidRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWorkerDemographicsByAoid(requestParameters: HRApiGetWorkerDemographicsByAoidRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const body: any = requestParameters;
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWorkerDemographicsByAoid(requestParameters.anthonyAlbrightAoid, requestParameters.preventCache, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Request a collection of the top 5 workers using a URI cache-buster.
         * @summary Worker V2 (List with Top 5 and Prevent Cache)
         * @param {HRApiListTop5PreventCacheRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listTop5PreventCache(requestParameters: HRApiListTop5PreventCacheRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const body: any = requestParameters;
            const localVarAxiosArgs = await localVarAxiosParamCreator.listTop5PreventCache(requestParameters.$top, requestParameters.preventCache, requestParameters.$filter, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Request demographic data for a collection of the top 5 workers using a URI cache-buster.
         * @summary Worker Demographics V2 (List with Top 5 and Prevent Cache)
         * @param {HRApiListTop5PreventCache0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listTop5PreventCache_1(requestParameters: HRApiListTop5PreventCache0Request = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const body: any = requestParameters;
            const localVarAxiosArgs = await localVarAxiosParamCreator.listTop5PreventCache_1(requestParameters.$top, requestParameters.preventCache, requestParameters.$filter, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * HRApi - factory interface
 * @export
 */
export const HRApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = HRApiFp(configuration)
    return {
        /**
         * Check the status of an async request to the Worker API given the key returned as part of the original asyn response\'s \"link\" header.
         * @summary Worker V2 (Check Async Request Status)
         * @param {HRApiCheckAsyncRequestStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkAsyncRequestStatus(requestParameters: HRApiCheckAsyncRequestStatusRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.checkAsyncRequestStatus(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Request a single worker given their AOID.
         * @summary Worker V2 (Single by AOID)
         * @param {HRApiGetWorkerByAoidRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkerByAoid(requestParameters: HRApiGetWorkerByAoidRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getWorkerByAoid(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Request demographic data for a single worker given their AOID.
         * @summary Worker Demographics V2 (Single by AOID)
         * @param {HRApiGetWorkerDemographicsByAoidRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkerDemographicsByAoid(requestParameters: HRApiGetWorkerDemographicsByAoidRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getWorkerDemographicsByAoid(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Request a collection of the top 5 workers using a URI cache-buster.
         * @summary Worker V2 (List with Top 5 and Prevent Cache)
         * @param {HRApiListTop5PreventCacheRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTop5PreventCache(requestParameters: HRApiListTop5PreventCacheRequest = {}, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.listTop5PreventCache(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Request demographic data for a collection of the top 5 workers using a URI cache-buster.
         * @summary Worker Demographics V2 (List with Top 5 and Prevent Cache)
         * @param {HRApiListTop5PreventCache0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTop5PreventCache_1(requestParameters: HRApiListTop5PreventCache0Request = {}, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.listTop5PreventCache_1(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for checkAsyncRequestStatus operation in HRApi.
 * @export
 * @interface HRApiCheckAsyncRequestStatusRequest
 */
export type HRApiCheckAsyncRequestStatusRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof HRApiCheckAsyncRequestStatus
    */
    readonly key: string
    
    /**
    * 
    * @type {string}
    * @memberof HRApiCheckAsyncRequestStatus
    */
    readonly $select?: string
    
} & any

/**
 * Request parameters for getWorkerByAoid operation in HRApi.
 * @export
 * @interface HRApiGetWorkerByAoidRequest
 */
export type HRApiGetWorkerByAoidRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof HRApiGetWorkerByAoid
    */
    readonly anthonyAlbrightAoid: string
    
    /**
    * 
    * @type {string}
    * @memberof HRApiGetWorkerByAoid
    */
    readonly preventCache?: string
    
} & any

/**
 * Request parameters for getWorkerDemographicsByAoid operation in HRApi.
 * @export
 * @interface HRApiGetWorkerDemographicsByAoidRequest
 */
export type HRApiGetWorkerDemographicsByAoidRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof HRApiGetWorkerDemographicsByAoid
    */
    readonly anthonyAlbrightAoid: string
    
    /**
    * 
    * @type {string}
    * @memberof HRApiGetWorkerDemographicsByAoid
    */
    readonly preventCache?: string
    
} & any

/**
 * Request parameters for listTop5PreventCache operation in HRApi.
 * @export
 * @interface HRApiListTop5PreventCacheRequest
 */
export type HRApiListTop5PreventCacheRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof HRApiListTop5PreventCache
    */
    readonly $top?: string
    
    /**
    * 
    * @type {string}
    * @memberof HRApiListTop5PreventCache
    */
    readonly preventCache?: string
    
    /**
    * 
    * @type {string}
    * @memberof HRApiListTop5PreventCache
    */
    readonly $filter?: string
    
} & any

/**
 * Request parameters for listTop5PreventCache_1 operation in HRApi.
 * @export
 * @interface HRApiListTop5PreventCache0Request
 */
export type HRApiListTop5PreventCache0Request = {
    
    /**
    * 
    * @type {string}
    * @memberof HRApiListTop5PreventCache0
    */
    readonly $top?: string
    
    /**
    * 
    * @type {string}
    * @memberof HRApiListTop5PreventCache0
    */
    readonly preventCache?: string
    
    /**
    * 
    * @type {string}
    * @memberof HRApiListTop5PreventCache0
    */
    readonly $filter?: string
    
} & any

/**
 * HRApiGenerated - object-oriented interface
 * @export
 * @class HRApiGenerated
 * @extends {BaseAPI}
 */
export class HRApiGenerated extends BaseAPI {
    /**
     * Check the status of an async request to the Worker API given the key returned as part of the original asyn response\'s \"link\" header.
     * @summary Worker V2 (Check Async Request Status)
     * @param {HRApiCheckAsyncRequestStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HRApiGenerated
     */
    public checkAsyncRequestStatus(requestParameters: HRApiCheckAsyncRequestStatusRequest, options?: AxiosRequestConfig) {
        return HRApiFp(this.configuration).checkAsyncRequestStatus(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Request a single worker given their AOID.
     * @summary Worker V2 (Single by AOID)
     * @param {HRApiGetWorkerByAoidRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HRApiGenerated
     */
    public getWorkerByAoid(requestParameters: HRApiGetWorkerByAoidRequest, options?: AxiosRequestConfig) {
        return HRApiFp(this.configuration).getWorkerByAoid(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Request demographic data for a single worker given their AOID.
     * @summary Worker Demographics V2 (Single by AOID)
     * @param {HRApiGetWorkerDemographicsByAoidRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HRApiGenerated
     */
    public getWorkerDemographicsByAoid(requestParameters: HRApiGetWorkerDemographicsByAoidRequest, options?: AxiosRequestConfig) {
        return HRApiFp(this.configuration).getWorkerDemographicsByAoid(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Request a collection of the top 5 workers using a URI cache-buster.
     * @summary Worker V2 (List with Top 5 and Prevent Cache)
     * @param {HRApiListTop5PreventCacheRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HRApiGenerated
     */
    public listTop5PreventCache(requestParameters: HRApiListTop5PreventCacheRequest = {}, options?: AxiosRequestConfig) {
        return HRApiFp(this.configuration).listTop5PreventCache(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Request demographic data for a collection of the top 5 workers using a URI cache-buster.
     * @summary Worker Demographics V2 (List with Top 5 and Prevent Cache)
     * @param {HRApiListTop5PreventCache0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HRApiGenerated
     */
    public listTop5PreventCache_1(requestParameters: HRApiListTop5PreventCache0Request = {}, options?: AxiosRequestConfig) {
        return HRApiFp(this.configuration).listTop5PreventCache_1(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
