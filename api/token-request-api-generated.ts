/* tslint:disable */
/* eslint-disable */
/*
ADP APIs

ADP API endpoints.

The version of the OpenAPI document: 1.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * TokenRequestApi - axios parameter creator
 * @export
 */
export const TokenRequestApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * A request to get an OAuth bearer token for our demo ADP Workforce Now by adding an Authorization header containing the base-64 encoded credentials.
         * @summary Token Request (Authorization Header)
         * @param {string} [grantType] 
         * @param {string} [clientId] 
         * @param {string} [clientSecret] 
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWithAuthorizationHeader: async (grantType?: string, clientId?: string, clientSecret?: string, body?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/oauth/v2/token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (grantType !== undefined) {
                localVarQueryParameter['grant_type'] = grantType;
            }

            if (clientId !== undefined) {
                localVarQueryParameter['client_id'] = clientId;
            }

            if (clientSecret !== undefined) {
                localVarQueryParameter['client_secret'] = clientSecret;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/octet-stream';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: body,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/auth/oauth/v2/token',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TokenRequestApi - functional programming interface
 * @export
 */
export const TokenRequestApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TokenRequestApiAxiosParamCreator(configuration)
    return {
        /**
         * A request to get an OAuth bearer token for our demo ADP Workforce Now by adding an Authorization header containing the base-64 encoded credentials.
         * @summary Token Request (Authorization Header)
         * @param {TokenRequestApiCreateWithAuthorizationHeaderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createWithAuthorizationHeader(requestParameters: TokenRequestApiCreateWithAuthorizationHeaderRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const body: any = requestParameters;
            const localVarAxiosArgs = await localVarAxiosParamCreator.createWithAuthorizationHeader(requestParameters.grantType, requestParameters.clientId, requestParameters.clientSecret, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TokenRequestApi - factory interface
 * @export
 */
export const TokenRequestApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TokenRequestApiFp(configuration)
    return {
        /**
         * A request to get an OAuth bearer token for our demo ADP Workforce Now by adding an Authorization header containing the base-64 encoded credentials.
         * @summary Token Request (Authorization Header)
         * @param {TokenRequestApiCreateWithAuthorizationHeaderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWithAuthorizationHeader(requestParameters: TokenRequestApiCreateWithAuthorizationHeaderRequest = {}, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.createWithAuthorizationHeader(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createWithAuthorizationHeader operation in TokenRequestApi.
 * @export
 * @interface TokenRequestApiCreateWithAuthorizationHeaderRequest
 */
export type TokenRequestApiCreateWithAuthorizationHeaderRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof TokenRequestApiCreateWithAuthorizationHeader
    */
    readonly grantType?: string
    
    /**
    * 
    * @type {string}
    * @memberof TokenRequestApiCreateWithAuthorizationHeader
    */
    readonly clientId?: string
    
    /**
    * 
    * @type {string}
    * @memberof TokenRequestApiCreateWithAuthorizationHeader
    */
    readonly clientSecret?: string
    
} & any

/**
 * TokenRequestApiGenerated - object-oriented interface
 * @export
 * @class TokenRequestApiGenerated
 * @extends {BaseAPI}
 */
export class TokenRequestApiGenerated extends BaseAPI {
    /**
     * A request to get an OAuth bearer token for our demo ADP Workforce Now by adding an Authorization header containing the base-64 encoded credentials.
     * @summary Token Request (Authorization Header)
     * @param {TokenRequestApiCreateWithAuthorizationHeaderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokenRequestApiGenerated
     */
    public createWithAuthorizationHeader(requestParameters: TokenRequestApiCreateWithAuthorizationHeaderRequest = {}, options?: AxiosRequestConfig) {
        return TokenRequestApiFp(this.configuration).createWithAuthorizationHeader(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
